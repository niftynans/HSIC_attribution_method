# -*- coding: utf-8 -*-
"""Mu_fid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wTmYjCEb1mcStgPdQ-5ULXzOJidBC95n
"""

# !pip3 install xplique
# !pip3 install openturns

import scipy
import os
import numpy as np
import cv2
import tensorflow as tf
import subprocess
from scipy.ndimage import gaussian_filter
from matplotlib import pyplot as plt
plt.style.use('seaborn')
import tensorflow_probability as tfp


import xplique
from xplique.attributions import *
from xplique.metrics import *
from xplique_addons import *
from utils import *
red_tr = get_alpha_cmap('Reds')
from xplique.metrics.fidelity import MuFidelity

print("Bash File Running! Currently in mu_fid.py!")

for m in range(4):
    if m == 0:
        model = tf.keras.applications.ResNet50V2()
        model.layers[-1].activation = tf.keras.activations.linear

        print(" Model Name: Resnet | Black Box Model: GradCAM")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_Resnet_Gradcam.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' + 'inputs_Resnet_Gradcam.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_Resnet_Gradcam.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))

        print(" Model Name: Resnet | Black Box Model: GradCAM++")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_Resnet_Gradcam++.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_Resnet_Gradcam++.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_Resnet_Gradcam++.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))

    
    elif m == 1:
        model = tf.keras.applications.efficientnet.EfficientNetB0()
        model.layers[-1].activation = tf.keras.activations.linear


        print(" Model Name: Efficient Net | Black Box Model: GradCAM")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_efficientnet_Gradcam.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_efficientnet_Gradcam.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_efficientnet_Gradcam.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))

        print(" Model Name: Efficient Net | Black Box Model: GradCAM++")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_efficientnet_Gradcam++.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_efficientnet_Gradcam++.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_efficientnet_Gradcam++.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))


    elif m == 2:
        model = tf.keras.applications.mobilenet.MobileNet()
        model.layers[-1].activation = tf.keras.activations.linear


        print(" Model Name: Mobilenet | Black Box Model: GradCAM")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_mobilenet_Gradcam.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_mobilenet_Gradcam.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_mobilenet_Gradcam.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))

        print(" Model Name: Mobilenet | Black Box Model: GradCAM++")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_mobilenet_Gradcam++.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_mobilenet_Gradcam++.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_mobilenet_Gradcam++.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))


    else:
        model = tf.keras.applications.efficientnet.EfficientNetB0()
        model.layers[-1].activation = tf.keras.activations.linear

        print(" Model Name: BGG-16 | Black Box Model: GradCAM")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_vgg-16_Gradcam.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_vgg-16_Gradcam.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_vgg-16_Gradcam.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))

        print(" Model Name: Resnet | Black Box Model: GradCAM++")
        explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_vgg-16_Gradcam++.npy')
        inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_vgg-16_Gradcam++.npy')
        labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_vgg-16_Gradcam++.npy')
            
        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))


    for h in range(3):

        if m == 0 and h == 0:
            print(" Model Name: Resnet | Sampler Name: LHC ")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_resnet_LHS.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_resnet_LHS.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_resnet_LHS.npy')

        
        elif m == 0 and h == 1:
            print(" Model Name: Resnet | Sampler Name: Sobol")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_resnet_Sobol.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_resnet_Sobol.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_resnet_Sobol.npy')
        
        elif m == 0 and h == 2:
            print(" Model Name: Resnet | Sampler Name: Halton")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_resnet_Halton.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_resnet_Halton.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_resnet_Halton.npy')
        
        
        elif m == 1 and h == 0:
            print(" Model Name: Efficient Net | Sampler Name: LHC")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_efficientnet_LHS.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_efficientnet_LHS.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_efficientnet_LHS.npy')
        
        elif m == 1 and h == 1:
            print(" Model Name: Efficient Net | Sampler Name: Sobol")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_efficientnet_Sobol.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_efficientnet_Sobol.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_efficientnet_Sobol.npy')

        elif m == 1 and h == 2:
            print(" Model Name: Efficient Net | Sampler Name: Halton")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_efficientnet_Halton.npy')
            inputs= np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_efficientnet_Halton.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_efficientnet_Halton.npy')

        elif m == 2 and h == 0:
            print(" Model Name: Mobile Net | Sampler Name: LHC")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_mobilenet_LHS.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_mobilenet_LHS.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_mobilenet_LHS.npy')
        
        elif m == 2 and h == 1:
            print(" Model Name: Mobile Net | Sampler Name: Sobol")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_mobilenet_Sobol.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_mobilenet_Sobol.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_mobilenet_Sobol.npy')
        
        
        elif m == 2 and h == 2:
            print(" Model Name: Mobile Net | Sampler Name: Halton")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_mobilenet_Halton.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_mobilenet_Halton.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_mobilenet_Halton.npy')
        
        elif m == 3 and h == 0:
            print(" Model Name: VGG-16 | Sampler Name: LHC")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_vgg-16_LHS.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_vgg-16_LHS.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_vgg-16_LHS.npy')
        
        elif m == 3 and h == 1:
            print(" Model Name: VGG-16 | Sampler Name: Sobol")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_vgg-16_Sobol.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_vgg-16_Sobol.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_vgg-16_Sobol.npy')
        
        else:
            print(" Model Name: VGG-16 | Sampler Name: Halton")

            explanations = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'explanations_vgg-16_Halton.npy')
            inputs = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'inputs_vgg-16_Halton.npy')
            labels = np.load('/data2/dl/grp04/HSIC-Attribution-Method/dl_essential/files' + '/' +'labels_ohe_vgg-16_Halton.npy')

        print(" MuFidelity Value is: ")
        mu_fid = MuFidelity(model, inputs, labels, 64)
        print(mu_fid.evaluate(explanations))

